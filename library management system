#include <iostream>
#include <vector>
#include <string>
#include <unordered_map>
#include <ctime>

using namespace std;

struct Book {
    string title;
    string author;
    string ISBN;
    bool available;
};

struct Borrower {
    string name;
    unordered_map<string, time_t> borrowedBooks; // ISBN and borrow date
};

vector<Book> books;
unordered_map<string, Borrower> borrowers;

void displayMenu() {
    cout << "Library Management System" << endl;
    cout << "1. Add Book" << endl;
    cout << "2. Search Book" << endl;
    cout << "3. Checkout Book" << endl;
    cout << "4. Return Book" << endl;
    cout << "5. View Borrowers" << endl;
    cout << "6. Exit" << endl;
    cout << "Choose an option: ";
}

void addBook() {
    Book newBook;
    cout << "Enter book title: ";
    cin.ignore();
    getline(cin, newBook.title);
    cout << "Enter book author: ";
    getline(cin, newBook.author);
    cout << "Enter book ISBN: ";
    getline(cin, newBook.ISBN);
    newBook.available = true;
    books.push_back(newBook);
    cout << "Book added successfully!" << endl;
}

void searchBook() {
    string query;
    cout << "Enter book title, author, or ISBN to search: ";
    cin.ignore();
    getline(cin, query);
    for (const auto& book : books) {
        if (book.title == query || book.author == query || book.ISBN == query) {
            cout << "Book found: " << book.title << " by " << book.author << " (ISBN: " << book.ISBN << ")" << endl;
            cout << "Status: " << (book.available ? "Available" : "Checked out") << endl;
            return;
        }
    }
    cout << "Book not found." << endl;
}

void checkoutBook() {
    string ISBN, borrowerName;
    cout << "Enter book ISBN to checkout: ";
    cin.ignore();
    getline(cin, ISBN);
    for (auto& book : books) {
        if (book.ISBN == ISBN && book.available) {
            cout << "Enter borrower's name: ";
            getline(cin, borrowerName);
            book.available = false;
            borrowers[borrowerName].name = borrowerName;
            borrowers[borrowerName].borrowedBooks[ISBN] = time(0);
            cout << "Book checked out successfully!" << endl;
            return;
        }
    }
    cout << "Book not available or not found." << endl;
}

void returnBook() {
    string ISBN, borrowerName;
    cout << "Enter book ISBN to return: ";
    cin.ignore();
    getline(cin, ISBN);
    cout << "Enter borrower's name: ";
    getline(cin, borrowerName);
    if (borrowers.find(borrowerName) != borrowers.end() && borrowers[borrowerName].borrowedBooks.find(ISBN) != borrowers[borrowerName].borrowedBooks.end()) {
        for (auto& book : books) {
            if (book.ISBN == ISBN) {
                book.available = true;
                time_t borrowTime = borrowers[borrowerName].borrowedBooks[ISBN];
                time_t returnTime = time(0);
                double fine = difftime(returnTime, borrowTime) / (60 * 60 * 24) * 0.5; // 0.5 currency units per day
                cout << "Book returned successfully!" << endl;
                cout << "Fine for overdue: " << fine << " currency units" << endl;
                borrowers[borrowerName].borrowedBooks.erase(ISBN);
                if (borrowers[borrowerName].borrowedBooks.empty()) {
                    borrowers.erase(borrowerName);
                }
                return;
            }
        }
    }
    cout << "Borrower or book not found." << endl;
}

void viewBorrowers() {
    if (borrowers.empty()) {
        cout << "No borrowers to display." << endl;
        return;
    }
    for (const auto& borrower : borrowers) {
        cout << "Borrower: " << borrower.second.name << endl;
        for (const auto& book : borrower.second.borrowedBooks) {
            cout << "  Book ISBN: " << book.first << " (Borrowed on: " << ctime(&book.second) << ")" << endl;
        }
    }
}

int main() {
    int choice;

    while (true) {
        displayMenu();
        cin >> choice;

        switch (choice) {
            case 1:
                addBook();
                break;
            case 2:
                searchBook();
                break;
            case 3:
                checkoutBook();
                break;
            case 4:
                returnBook();
                break;
            case 5:
                viewBorrowers();
                break;
            case 6:
                cout << "Exiting the library management system. Goodbye!" << endl;
                return 0;
            default:
                cout << "Invalid choice. Please try again." << endl;
        }

        cout << endl;
    }

    return 0;
}
